import React, { useState } from "react";

import { toast } from "sonner";

import courseService from "../../services/courseService"; // service g·ªçi API t·∫°o kh√≥a h·ªçc
import { uploadToCloudinary } from "../../services/uploadCloudinary";

import { ROUTE_PATH } from "../../constants/routePath"; // import ƒë∆∞·ªùng d·∫´n

import MyEditor from "../../components/MyEditor";

import { Button } from "@mui/material";

function ManageCourseCreatePage() {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [thumbnail, setThumbnail] = useState(null);
  const [subject, setSubject] = useState("");
  const [previewImage, setPreviewImage] = useState("");
  const [loading, setLoading] = useState(false);

  const handleEditorChange = (value) => {
    setDescription(value);
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setThumbnail(file);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file) {
      setThumbnail(file);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault(); // c·∫ßn ƒë·ªÉ cho ph√©p drop
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!title.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ kh√≥a h·ªçc");
      return;
    }
    if (!description.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p m√¥ t·∫£ kh√≥a h·ªçc");
      return;
    }

    if (!thumbnail) {
      toast.error("Vui l√≤ng ch·ªçn ·∫£nh ƒë·∫°i di·ªán kh√≥a h·ªçc");
      return;
    }

    if (!subject.trim()) {
      toast.error("Vui l√≤ng ch·ªçn lo·∫°i m√¥n h·ªçc");
      return;
    }

    try {
      setLoading(true);

      let imageUrl = "";
      if (thumbnail) {
        imageUrl = await uploadToCloudinary(thumbnail);
      }

      const newCourse = {
        title,
        subject,
        thumbnail: imageUrl,
        description
      };

      const res = await courseService.createCourse(newCourse);  

      if (res.success) {
        toast.success(res.message || "T·∫°o kh√≥a h·ªçc th√†nh c√¥ng");
        setTitle("");
        setSubject("");
        setDescription("");
        setThumbnail(null);
        setPreviewImage("");
      } else {
        toast.error(res.message || "T·∫°o kh√≥a h·ªçc th·∫•t b·∫°i");
      }
    } catch (error) {
      console.error(error);
      toast.error("L·ªói khi t·∫°o kh√≥a h·ªçc");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white">
      <h1 className="text-3xl font-bold mb-8 text-gray-800 border-b border-gray-200 pb-2">
        T·∫°o kh√≥a h·ªçc
      </h1>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Ti√™u ƒë·ªÅ */}
        <div>
          <label className="block text-gray-700 font-medium mb-2">
            Ti√™u ƒë·ªÅ kh√≥a h·ªçc<span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full border border-gray-300 rounded-xl p-3 text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-300 shadow-sm"
            placeholder="Nh·∫≠p ti√™u ƒë·ªÅ kh√≥a h·ªçc"
          />
        </div>

        {/* Thu·ªôc lo·∫°i m√¥n h·ªçc n√†o */}
        <div>
          <label className="block text-gray-700 font-medium mb-2">
            Lo·∫°i m√¥n h·ªçc<span className="text-red-500">*</span>
          </label>
          <select
            value={subject}
            onChange={(e) => setSubject(e.target.value)}
            className="w-full border border-gray-300 rounded-xl p-3 text-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-300 shadow-sm"
          >
            <option value="">Ch·ªçn lo·∫°i m√¥n h·ªçc</option>
            <option value="Math">To√°n h·ªçc</option>
            <option value="Literature">Ng·ªØ vƒÉn</option>
            <option value="English">Ti·∫øng Anh</option>
            <option value="CivicEducation">Gi√°o d·ª•c c√¥ng d√¢n</option>
            <option value="HistoryAndGeography">L·ªãch s·ª≠ v√† ƒê·ªãa L√Ω</option>
            <option value="NaturalSciences">Khoa h·ªçc t·ª± nhi√™n</option>
            <option value="Technology">C√¥ng ngh·ªá</option>
            <option value="InformationTechnology">Tin h·ªçc</option>
            <option value="Other">Kh√°c</option>
          </select>
        </div>

        {/* M√¥ t·∫£ */}
        <div>
          <label className="block text-gray-700 font-medium mb-2">
            M√¥ t·∫£ kh√≥a h·ªçc<span className="text-red-500">*</span>
          </label>
          <MyEditor
            content={description}
            onChangeContent={handleEditorChange}
          />
        </div>
        {/* ·∫¢nh ƒë·∫°i di·ªán */}
        <div>
          <label className="block text-gray-700 font-medium mb-2">
            ·∫¢nh ƒë·∫°i di·ªán <span className="text-red-500">*</span>
          </label>
          <div
            className="border-2 border-dashed border-gray-300 rounded-xl p-4 text-center hover:border-custom-blue transition"
            onDragOver={handleDragOver}
            onDrop={handleDrop}
          >
            <input
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="hidden"
              id="fileInput"
            />
            <label
              htmlFor="fileInput"
              className="cursor-pointer text-custom-blue hover:underline"
            >
              Ch·ªçn ho·∫∑c k√©o-th·∫£ ·∫£nh v√†o ƒë√¢y
            </label>

            {previewImage && (
              <img
                src={previewImage}
                alt="Preview"
                className="mt-4 w-48 object-cover rounded-xl border shadow-sm mx-auto"
              />
            )}
          </div>
        </div>

        {/* N√∫t t·∫°o */}
        <div className="flex space-x-4 gap-4">
          <Button
            type="button"
            variant="contained"
            disableElevation
            fullWidth
            disabled={loading} // üëà tr√°nh user b·∫•m khi ƒëang loading
            onClick={() => (window.location.href = ROUTE_PATH.LECTURER_COURSES)}
            sx={{
              py: "8px",
              px: "16px",
              fontSize: "0.875rem",
              fontWeight: "500",
              borderRadius: "6px",
              textTransform: "none",
              color: "white",
              bgcolor: "grey.600",
              transition:
                "transform 0.2s ease-in-out, background-color 0.2s ease-in-out",
              "&:hover": {
                bgcolor: "grey.700",
              },
              "&.Mui-disabled": {
                color: "white",
                bgcolor: "grey.400",
                cursor: "not-allowed",
                opacity: 1,
              },
            }}
          >
            Quay l·∫°i
          </Button>
          <Button
            type="submit"
            variant="contained"
            loading={loading} // üëà Th√™m prop n√†y
            disableElevation
            fullWidth
            disabled={loading} // üëà tr√°nh user b·∫•m khi ƒëang loading
            sx={{
              py: "8px",
              px: "16px",
              fontSize: "0.875rem",
              fontWeight: "500",
              borderRadius: "6px",
              textTransform: "none",
              color: "white",
              bgcolor: !loading ? "#4A90E2" : "grey.400",
              transition:
                "transform 0.2s ease-in-out, background-color 0.2s ease-in-out",
              "&:hover": {
                bgcolor: !loading ? "#357ABD" : "grey.400",
              },
              "&.Mui-disabled": {
                color: "white",
                bgcolor: "grey.400",
                cursor: "not-allowed",
                opacity: 1,
              },
            }}
          >
            {loading ? "ƒêang x·ª≠ l√Ω..." : "T·∫°o kh√≥a h·ªçc"}
          </Button>
        </div>
      </form>
    </div>
  );
}

export default ManageCourseCreatePage;
